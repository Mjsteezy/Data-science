# -*- coding: utf-8 -*-
"""esports-earnings (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XxQOfdRQI4Ax7ghtds73AapOk0xlHYcm

# My First Full analysis
## by Miles Johnson
#### I have always been a fan of video games and ever since I came across the competitive seen, I have been hooked. I aspire to be a data analyst and just started learning.

#### This is my first time using code to do a full analysis. I have taken a ton of courses and decided to put my skills to the test.

#### I wanted to practice **pandas** and visualization using **seaborn**. Doing this project I learned many different ways to manipulate and pull the data I need from the dataset. Also how to plot different graphs using specific values from specific columns.

## I would love any feedback on how I could better my analysis!

# Import libraries and read in data
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
import os
warnings.filterwarnings("ignore")
for dirname, _, filenames in os.walk('/kaggle/input/esports-earnings/GeneralEsportData.csv'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

gen_data = pd.read_csv('/kaggle/input/esports-earnings/GeneralEsportData.csv')
hist_data = pd.read_csv('/kaggle/input/esports-earnings/HistoricalEsportData.csv')

gen_data.head()

hist_data.head()

hist_data.dtypes

hist_data['Date'] = pd.to_datetime(hist_data['Date'])
hist_data.dtypes

"""# Data Understanding"""

gen_data.shape

gen_data.dtypes

gen_data.isna().sum()

hist_data.isna().sum()

gen_data.columns

pd.set_option('float_format', '{:f}'.format)
gen_data.describe()

hist_data.describe()

"""# Data Preparation"""

gen_data

gen_data.TotalEarnings = gen_data.TotalEarnings/1000000
gen_data.OfflineEarnings = gen_data.OfflineEarnings/1000000

hist_data

#merging tables so i can have genre in history data
hist_data = pd.merge(hist_data, gen_data, how='left', on=['Game'])

hist_data = hist_data.drop(columns=['ReleaseDate','TotalEarnings', 'OfflineEarnings', 'TotalPlayers',
       'TotalTournaments'], axis=1)
hist_data

hist_data.columns

hist_data = hist_data[hist_data['Earnings'] > 0]
hist_data

gen_clean = gen_data[(gen_data['TotalEarnings'] > 0) & (gen_data['OfflineEarnings'] > 0)]
gen_clean

"""### I dropped all rows where total earnings and Offline earnings were 0 to keep out unnecessary rows

# Data Visualization
"""

sns.set_palette('bright')

sns.histplot(data=gen_clean, x='ReleaseDate')
plt.show()

"""### We see here that most games in our data released 2010-2023."""

sns.histplot(data=hist_data, x='Date')
plt.show()

"""## The number of tournaments have been trending since esports first started."""

gen_clean.Genre.replace({'Multiplayer Online Battle Arena':'MOBA',
                        'First-Person Shooter': 'FPS',
                         'Role-Playing Game': 'RPG',
                         'Third-Person Shooter': 'TPS',
                        'Collectible Card Game': 'Card Game'}, inplace=True)
gen_clean.Game.replace({"PLAYERUNKNOWN'S BATTLEGROUNDS Mobile": 'PUBG MOBILE',
                       'PLAYERUNKNOWN’S BATTLEGROUNDS': 'PUBG',
                       'Counter-Strike: Global Offensive': 'CS-GO',
                       'Super Smash Bros. Ultimate': 'Smash Ultimate',
                       'Super Smash Bros. Melee': 'Smash Melee'}, inplace=True)
hist_data.Game.replace({"PLAYERUNKNOWN'S BATTLEGROUNDS Mobile": 'PUBG MOBILE',
                       'PLAYERUNKNOWN’S BATTLEGROUNDS': 'PUBG',
                       'Counter-Strike: Global Offensive': 'CS-GO',
                       'Super Smash Bros. Ultimate': 'Smash Ultimate',
                       'Super Smash Bros. Melee': 'Smash Melee'}, inplace=True)
hist_data.Genre.replace({'Multiplayer Online Battle Arena':'MOBA',
                        'First-Person Shooter': 'FPS',
                         'Role-Playing Game': 'RPG',
                         'Third-Person Shooter': 'TPS',
                        'Collectible Card Game': 'Card Game'}, inplace=True)

sns.set(font_scale=.8)
sns.histplot(data=gen_clean, x = gen_clean['Genre'], stat='percent', color='purple')
plt.xticks(rotation = 45)
plt.title('Distribution of Genre')
plt.show()

"""### Most of our games are first person shooter(20%) and fighting(30%) genre"""

sns.set_palette('bright')
sns.set_style('whitegrid')
# top ten games by total earnings
earnings = gen_clean.sort_values('TotalEarnings', ascending=False).iloc[:10]
sns.barplot(data=earnings, x='Game', y='TotalEarnings', width=.5)
plt.xticks(rotation = 45)
plt.title('TOP 10 GAME EARNINGS IN MILLIONS')
plt.show()

"""## **Dota 2** hold top spot in total earnings."""

#Top 10 games by offline earnings
off_earn = gen_clean.sort_values('OfflineEarnings', ascending=False).iloc[:10]
sns.barplot(data=off_earn, x='Game', y='OfflineEarnings', width=.5)
plt.xticks(rotation = 45)
plt.title('TOP 10 GAME OFFLINE EARNINGS IN MILLIONS')
plt.show()

"""## **Dota 2** also hold number 1 in most earngings by offline tournaments"""

# making 'online earnings' column
gen_clean['OnlineEarnings'] = gen_clean['TotalEarnings'] - gen_clean['OfflineEarnings']
gen_clean

# Top 10 games by online earnings
earnings_on = gen_clean.sort_values('OnlineEarnings', ascending=False).iloc[:10]
sns.barplot(data=earnings_on, x='Game', y='OnlineEarnings', width=.5)
plt.xticks(rotation = 45)
plt.title('TOP 10 GAME EARNINGS IN MILLIONS(Online)')
plt.show()

"""### **Fortnite** has the highest earnings in Online only tournaments by a long run."""

#top 10 games by number of tournaments
highest_tour = gen_clean.sort_values('TotalTournaments', ascending=False).iloc[:10]
sns.barplot(data=highest_tour, x='Game', y= 'TotalTournaments', width=.5)
plt.xticks(rotation=45)
plt.title('Top 10 Games with highest amount of tournaments')
plt.show()

"""### **Starcraft** has the highest amount of tournaments played. **Rocket league** didnt make top 10 earnings yet they are number 3 here."""

sns.barplot(data=highest_tour, x='TotalTournaments', y='Genre', width=.5, errorbar=None, orient='h')
plt.xticks(rotation=45)
plt.title('Highest number of tournaments by genre')
plt.show()

"""## If we look at tournamnets by genre, we see that **FPS** games hold the most tournaments than any other genre."""

Starcraft_II = hist_data.loc[hist_data['Game'] == 'StarCraft II']
sns.lineplot(data=Starcraft_II, x='Date', y='Earnings')
plt.title('Starcraft earnings per tournament')
plt.show()

"""## Starcraft II holds a wide range of tournaments with a wide range of earnings per tournament. There highest peak was in 2018 and has been trending down since."""

Dota_2 = hist_data.loc[hist_data['Game'] == 'Dota 2']
sns.lineplot(data=Dota_2, x='Date', y='Earnings')
plt.show()

"""## Here we Dota 2 holds 2 major tournaments a year. In the beginning of 2020 we see a gap because of COVID."""

League = hist_data.loc[hist_data['Game'] == 'League of Legends']
sns.lineplot(data=League, x='Date', y='Earnings')
plt.title('League of Legends earning per tournament')
plt.ylabel('Earning (Millions)')
plt.show()

"""## League of legends Earning peaked between 2018 and 2019. Most of there earnings fall bewtween 1 and 2 million."""

sns.lineplot(y=Starcraft_II['Earnings'].cumsum(), x='Date', data=Starcraft_II, label='Starcraft')
sns.lineplot(y=League['Earnings'].cumsum(), x='Date', data=League, label='League')
plt.legend()
plt.title('League of legends vs Starcraft total earnings over time')
plt.show()

"""## This chart show Starcraft earnings over time against league of legends."""

FPS_game = gen_clean.loc[gen_clean['Genre'] == 'FPS'].sort_values('TotalEarnings', ascending=False).iloc[:10]
sns.barplot(x='TotalEarnings', y='Game', data=FPS_game, orient='h')
plt.title('Top 10 FPS Games by earnings (Millions)')
plt.show()

"""## CS-GO has the highest earnings than any other FPS game. CS-GO has 120 million more earnings than the second spot."""

strat_game = gen_clean.loc[gen_clean['Genre']=='Strategy'].sort_values('TotalEarnings', ascending=False).iloc[:10]
sns.barplot(data=strat_game, x='TotalEarnings', y='Game', orient='h')
plt.title('Top 10 Strategy games by earnings')
plt.show()

"""## Starcraft II is the leading game by earnings in the strategy genre"""